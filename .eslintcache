[{"/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/index.js":"1","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/reportWebVitals.js":"2","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/App.js":"3","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/stores/ClientsStore.js":"4","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/NavBar.js":"5","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Actions.js":"6","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Clients.js":"7","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/stores/ClientStore.js":"8","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Analytics.js":"9","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/AddClient.js":"10","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Badges.js":"11","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Client.js":"12","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Update.js":"13","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Charts.js":"14","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/NewClients.js":"15","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/OutStandingClients.js":"16","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/EmailsSent.js":"17","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/HottestCountry.js":"18","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Popup.js":"19","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/TopEmployees.js":"20","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/SalesByCountry.js":"21","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/SalesSinceDate.js":"22"},{"size":473,"mtime":1610644524817,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1610644524817,"results":"25","hashOfConfig":"24"},{"size":734,"mtime":1610644524807,"results":"26","hashOfConfig":"24"},{"size":3499,"mtime":1613901957823,"results":"27","hashOfConfig":"24"},{"size":791,"mtime":1610644524811,"results":"28","hashOfConfig":"24"},{"size":317,"mtime":1610644524807,"results":"29","hashOfConfig":"24"},{"size":2261,"mtime":1613901824077,"results":"30","hashOfConfig":"24"},{"size":672,"mtime":1610644524818,"results":"31","hashOfConfig":"24"},{"size":377,"mtime":1610644524808,"results":"32","hashOfConfig":"24"},{"size":2154,"mtime":1610644524808,"results":"33","hashOfConfig":"24"},{"size":526,"mtime":1610644524809,"results":"34","hashOfConfig":"24"},{"size":1359,"mtime":1610644524810,"results":"35","hashOfConfig":"24"},{"size":3244,"mtime":1610644524814,"results":"36","hashOfConfig":"24"},{"size":470,"mtime":1610644524809,"results":"37","hashOfConfig":"24"},{"size":583,"mtime":1610644524812,"results":"38","hashOfConfig":"24"},{"size":596,"mtime":1610644524812,"results":"39","hashOfConfig":"24"},{"size":556,"mtime":1610644524811,"results":"40","hashOfConfig":"24"},{"size":574,"mtime":1610644524811,"results":"41","hashOfConfig":"24"},{"size":2428,"mtime":1610644524812,"results":"42","hashOfConfig":"24"},{"size":1790,"mtime":1610644524814,"results":"43","hashOfConfig":"24"},{"size":2469,"mtime":1610644524813,"results":"44","hashOfConfig":"24"},{"size":1723,"mtime":1610644524813,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"1yisgwh",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"49"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"49"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"49"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"49"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"49"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"49"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"49"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"49"},"/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/index.js",["104"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport { Provider } from 'mobx-react'\nimport { ClientsStore, Users } from './stores/ClientsStore';\n\n\nlet clientsStore = new ClientsStore()\nconst store = {clientsStore}\n\nReactDOM.render(\n  <Provider {...store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n",["105","106"],"/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/reportWebVitals.js",[],"/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/App.js",["107"],"import './App.css';\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Clients from \"../src/components/Clients\";\nimport Navbar from \"../src/components/NavBar\";\nimport Actions from \"../src/components/Actions\";\nimport Analytics from \"../src/components/Analytics\";\nimport { observer } from 'mobx-react'\n\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <Route exact path=\"/\" render={() => <Clients />} />\n      <Route exact path=\"/clients\" render={() => <Clients /> }/>\n      <Route exact path=\"/actions\" render={() => <Actions /> }/>\n      <Route exact path=\"/analytics\" render={() => <Analytics /> }/>\n    </Router>\n  );\n}\n\nexport default observer(App);\n","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/stores/ClientsStore.js",["108"],"import { observable, action, makeObservable, computed } from 'mobx'\nimport axios from \"axios\";\nimport {ClientStore} from './ClientStore'\n\nexport class ClientsStore {\n    constructor() {\n        this.clients = []\n\n        makeObservable(this, {\n            clients: observable,\n            addClient: action, \n            countEmail: computed,\n            hottestCountry: computed,\n            totalNewClients: computed,\n            getFormmatedDate: action,\n            outStandClients: computed,\n            getOwners: computed,\n            updateOwner: action,\n            updateEmail: action,\n            declareSale: action,\n            update: action\n        })\n       \n    }  \n    \n    async addClient(input){\n        const client = new ClientStore(input.name, input.surName, input.owner, input.country)\n        console.log(client)\n        await axios.post(\"/client\", client)\n    }\n\n    get countEmail() {\n        let count = this.clients.filter(e => e.email_type != '-');\n        return count.length;\n    }\n\n    get hottestCountry(){\n        const countryObj = {}\n        this.clients.forEach(c => { countryObj[c.country] = 0})\n        this.clients.forEach(c => { if (c.sold) countryObj[c.country]++})\n        let max = countryObj[Object.keys(countryObj)[0]]\n        let hottest = \"\"\n        for(let key of Object.keys(countryObj)) {\n            if(countryObj[key] >= max) {\n                max = countryObj[key]\n                hottest = key\n                \n            }\n        }\n        return hottest   \n    }\n\n    getFormmatedDate = date => {\n        date = new Date(date);\n        let month = date.toLocaleString('en-us', { month: 'long' })\n        let year = date.getFullYear();\n        return `${year}${month}`;\n    };\n\n    get totalNewClients() {\n        let filtered = this.clients.filter(d =>\n            this.getFormmatedDate(Date.now()) === this.getFormmatedDate(d.date))\n        return filtered.length;\n    }\n\n    get outStandClients() {\n        let numClients = this.clients.filter(c => !c.sold );\n        return numClients.length;\n    };\n\n    get getOwners() {\n        let owners = new Set();\n        this.clients.map(o => owners.add(o.owner));\n        let ownersArray = Array.from(owners);\n        return ownersArray;\n    };\n\n    findName = (input) => {\n        let client = this.clients.find(c => c.first + \" \" + c.last === input.name);\n        return client.first + \" \" + client.last;\n    };\n\n    updateOwner = async (input) => {\n        if (input.name) {\n            await axios.put(`/owner/${this.findName(input)}/${input.transfer}`)\n            input.transfer = ''\n            input.name = ''\n        } else {\n            alert(\"Please Insert Client Name\")\n        }\n    }\n\n\n    updateEmail = async (input) => {\n        if (input.name) {\n            await axios.put(`/email/${this.findName(input)}/${input.email}`);\n            input.email = ''\n            input.name = ''\n        } else {\n            alert(\"Please Insert Client Name\")\n        }\n    }\n\n    declareSale = async (input) => {\n        if (input.name) {\n            await axios.put(`/declare/${this.findName(input)}`);\n            input.name = ''\n        } else {\n            alert(\"Please Insert Client Name\")\n        }\n    }\n\n    update = async (client, input) => {\n        client.country = input.country;\n        const name = input.name + \" \" + input.surName\n        await axios.put(`/client/${name}`, client);\n        client.first = `${input.name}`;\n        client.last = `${input.surName}`;\n    };\n}\n","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/NavBar.js",["109","110"],"import '../styles//navBar.css';\n\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\n\n\nfunction NavBar() {\n    return (\n        <div>\n            <div className=\"nav-wrapper\">\n                <div className=\"left-side\">\n                    <div className=\"nav-link-wrapper\">\n                        <div><Link to=\"/clients\">clients</Link></div>\n                    </div>\n                    <div className=\"nav-link-wrapper\">\n                        <div><Link to=\"/actions\">actions</Link></div>\n                    </div>\n                    <div className=\"nav-link-wrapper\">\n                        <div><Link to=\"/analytics\">analytics</Link></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default NavBar;\n","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Actions.js",[],"/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Clients.js",["111","112","113"],"import React, { useEffect, useState } from 'react';\nimport { observer, inject } from 'mobx-react'\nimport '../styles/clients.css';\nimport Client from \"./Client\";\nimport axios from \"axios\";\n\nfunction Clients(props) {\n    const [search, setSearch] = useState(\"\")\n    const [select, setSelect] = useState(\"first\")\n\n\n    const handleSearch = (e) => {\n        setSearch(e.target.value)\n\n\n    }\n    const handleSelect = (e) => {\n        setSelect(e.target.value)\n    }\n\n    useEffect(async () => {\n        let clientsData = await axios.get('/clients')\n        props.clientsStore.clients = clientsData.data\n    }, [])\n\n\n\n    return (\n        <div>\n            <div id=\"search-nav\">\n                <input\n                    placeholder=\"Search\"\n                    id=\"search\"\n                    value={search}\n                    onChange={handleSearch}\n                />\n                <select id=\"selectInput\" value={select} onChange={handleSelect}>\n                    <option value=\"first\">Name</option>\n                    <option value=\"country\">Country</option>\n                    <option value=\"owner\">Owner</option>\n                    <option value=\"sold\">Sold</option>\n                </select>\n            </div>\n            <div id=\"header\" >\n                <span>Name</span>\n                <span>Surname</span>\n                <span>Country</span>\n                <span>First Contact</span>\n                <span>Email</span>\n                <span>Sold</span>\n                <span>Owner</span>\n            </div>\n            <div id ='clients'>\n            {search === \"\" && select == 'sold'\n                ? props.clientsStore.clients.filter(fd => fd[select]).map(c => <Client key={c._id} client={c} />)\n                : search === \"\"\n                    ? props.clientsStore.clients.map(c => <Client key={c._id} client={c} />)\n                    : props.clientsStore.clients.filter(fd =>\n                        fd[select]\n                            .toUpperCase()\n                            .toLowerCase()\n                            .includes(search))\n                        .map(c => <Client key={c._id} client={c} />)\n            }\n            </div>\n\n\n        </div>\n    )\n\n}\n\nexport default inject(\"clientsStore\")(observer(Clients))","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/stores/ClientStore.js",["114","115"],"import { observable, makeObservable, action, computed } from 'mobx'\n\nexport class ClientStore {\n\n    constructor(first, last, owner, country) {\n        this.first = first\n        this.last = last\n        this.owner = owner\n        this.country = country\n        this.email= \"\"\n        this.emailType= null\n        this.firstContact= \"\"\n        this.sold = false\n\n        makeObservable(this, {\n            first: observable,\n            last: observable,\n            country: observable,\n            owner: observable,\n            sold: observable,\n            firstContact: observable,\n            email: observable,\n            emailType: observable\n\n        })\n    }\n\n}","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Analytics.js",["116"],"import React, { Component } from 'react';\nimport Charts from './Charts';\nimport \"../styles/analytics.css\"\nimport Badges from \"./Badges\";\n\nfunction Analytics() {\n\n    return (\n        <div>\n            <div id=\"analytics-container\">\n                <div><Badges/></div>\n                <div><Charts/></div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default Analytics;\n","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/AddClient.js",[],"/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Badges.js",[],"/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Client.js",[],"/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Update.js",["117","118"],"\nimport React, { Component, useState } from \"react\";\nimport { observer, inject } from 'mobx-react'\n\nimport axios from \"axios\";\nimport \"../styles/actions.css\";\n\nfunction Update(props) {\n\n    const [input, setInput] = useState({ name: \"\", transfer: \"\", email: \"\", owner: \"\" })\n\n    const declareSale = (input,flags) => {\n        props.clientsStore.declareSale(input, flags)\n    }\n    const updateEmail = (input,flags) => {\n        props.clientsStore.updateEmail(input,flags)\n    }\n    const updateOwner = (input,flags) => {\n        props.clientsStore.updateOwner(input, flags)\n    }\n\n\n    return (\n        <div id=\"Update\">\n            <h3>Update</h3>\n            <div className=\"updateWrapper\">\n                Client\n          <input\n                    placeholder=\"Client Name\"\n                    id=\"clientName\"\n                    list=\"client\"\n                    type=\"text\"\n                    className=\"selectInput\"\n                    value={input.name}\n                    onChange={({ target }) => setInput(state => ({ ...state, name: target.value }))}\n                />\n                <datalist id=\"client\">\n                    {props.clientsStore.clients.map(c => (\n                        <option value={c.first + \" \" + c.last} key={c._id} />\n                    ))}\n                </datalist>\n            </div>\n\n            <div className=\"updateWrapper\">\n                Transfer ownership to\n          <input\n                    placeholder=\"Owner Name\"\n                    id=\"transfer\"\n                    list=\"owner\"\n                    type=\"text\"\n                    className=\"selectInput\"\n                    value={input.transfer}\n                    onChange={({ target }) => setInput(state => ({ ...state, transfer: target.value }))}\n                />\n                <datalist id=\"owner\">\n                    {props.clientsStore.getOwners.map((o, i) => (\n                        <option value={o} key={i} />\n                    ))}\n                </datalist>\n\n                <div className= \"update-btn-text\" onClick={() => updateOwner(input)}>TRANSFER</div><span id=\"TRANSFER\"></span>\n            </div>\n\n            <div className=\"updateWrapper\">\n                Send Email\n          <input\n                    list=\"email\"\n                    id=\"sendEmail\"\n                    placeholder=\"Email Type\"\n                    onChange={({ target }) => setInput(state => ({ ...state, email: target.value }))}\n                    className=\"selectInput\"\n                />\n                <datalist id=\"email\">\n                    <option value=\"A\">A</option>\n                    <option value=\"B\">B</option>\n                    <option value=\"C\">C</option>\n                    <option value=\"D\">D</option>\n                </datalist>\n\n                <div className=\"update-btn-text\" onClick={() => updateEmail(input)}>SEND</div><span id=\"SEND\"></span>\n            </div>\n\n            <div className=\"updateWrapper\">\n                Declare sale!\n          <div></div>\n                <div className=\"update-btn-text\" id=\"declare\" onClick={() => declareSale(input)}>DECLARE</div><span id=\"DECLARE\"></span>\n            </div>\n        </div>\n    );\n}\n\n\nexport default inject(\"clientsStore\")(observer(Update))","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Charts.js",[],"/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/NewClients.js",[],"/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/OutStandingClients.js",[],"/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/EmailsSent.js",[],["119","120"],"/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/HottestCountry.js",[],"/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/Popup.js",["121","122"],"import React, { Component, useState } from 'react';\nimport { observer, inject } from 'mobx-react'\nimport '../styles/popup.css';\nimport axios from \"axios\";\n\nfunction Popup(props) {\n    const [input, setInput] = useState({ name: \"\", surName: \"\", country: \"\" })\n\n    const update = (input) => {\n        const client = props.client\n        props.clientsStore.update(client, input)\n        props.close()\n    };\n\n\n    return (\n        <div className=\"popup\">\n            <div className=\"popup_inner\">\n\n                <div>\n                    <button id=\"closePopup\" onClick={props.close}>\n                        <i className=\"fas fa-times\" />\n                    </button>\n                </div>\n\n                <div id=\"input-container\">\n                    <div className=\"popText\"> Name : </div>\n                    <div>\n                        <input\n                            className=\"popInput\"\n                            placeholder={props.name}\n                            value={input.name}\n                            id=\"name\"\n                            onChange={({ target }) => setInput(state => ({ ...state, name: target.value }))}\n                        />\n                    </div>\n                    <div className=\"popText\"> Surname : </div>\n                    <div>\n                        <input\n                            className=\"popInput\"\n                            placeholder={props.surName}\n                            value={input.surName}\n                            id=\"surName\"\n                            onChange={({ target }) => setInput(state => ({ ...state, surName: target.value }))}\n                        />\n                    </div>\n                    <div className=\"popText\"> Country : </div>\n                    <div>\n                        <input\n                            className=\"popInput\"\n                            placeholder={props.country}\n                            value={input.country}\n                            id=\"country\"\n                            onChange={({ target }) => setInput(state => ({ ...state, country: target.value }))}\n                        />\n                    </div>\n                </div>\n\n\n                <div>\n                    <button id=\"updatePopup\" onClick={() => update(input)}>UPDATE</button>\n                </div>\n\n            </div>\n        </div>\n    )\n\n}\n\nexport default inject(\"clientsStore\")(observer(Popup))","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/TopEmployees.js",["123","124"],"import React, { Component, useState } from \"react\";\nimport { observer, inject } from 'mobx-react'\n\nimport { ComposedChart, Bar, XAxis, YAxis, Tooltip, Legend }\n    from \"recharts\";\nimport \"../styles/analytics.css\"\n\n\n\nfunction TopEmployees(props) {\n \n    const generateDataForChart = data => {\n        let employees = {}\n        let employeesBySales = []\n        data.forEach(c => {\n            if (c.sold) {\n                employees[c.owner]\n                    ? employees[c.owner]++\n                    : employees[c.owner] = 1\n            }\n        })\n        Object.keys(employees)\n            .forEach(e => {\n                employeesBySales\n                    .push({ name: e, sales: employees[e] })\n            })\n        let dataForChart = employeesBySales\n            .sort((a, b) => a.sales - b.sales)\n            .splice(employeesBySales.length - 3)\n        return dataForChart\n    }\n\n    return (\n        <div>\n            <div id=\"top-employees-chart\" className=\"chart\">\n                <span id=\"topEmpHeader\">Top Employees:</span>\n                <ComposedChart\n                    layout=\"vertical\"\n                    width={500}\n                    height={200}\n                    data={generateDataForChart(props.clientsStore.clients)}\n                    margin={{\n                        top: 30, right: 20, bottom: 20, left: 50,\n                    }}>\n                    <XAxis type=\"number\" dataKey=\"sales\"  />\n                    <YAxis reversed={true} dataKey=\"name\" type=\"category\" />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"sales\" barSize={10} fill=\"#003f5c\" />\n                </ComposedChart>\n            </div>\n        </div>\n    );\n\n}\n\nexport default inject(\"clientsStore\")(observer(TopEmployees))","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/SalesByCountry.js",["125","126"],"import React, { Component, useState } from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Bar } from 'recharts'\nimport \"../styles/analytics.css\"\n\n\nfunction SalesByCountry(props) {\n\n    const [selection, setSelection] = useState(\"country\")\n\n    const handleSelection = e => setSelection(e.target.value)\n\n    const createDataObject = (clients, selection) => {\n        let dataObj = {}\n        for (let client of clients) {\n            if (client.sold) {\n                dataObj[client[selection]] ? dataObj[client[selection]]++ : dataObj[client[selection]] = 1\n            }\n        }\n        return dataObj\n    }\n\n    const generateSalesByDataPoint = (data, selection) => {\n\n        let dataObj = createDataObject(data, selection)\n        let dataArr = []\n        let dataKeys = Object.keys(dataObj)\n\n        for (let item of dataKeys) {\n            dataArr.push({ name: item.split(\" \")[0], sales: dataObj[item] })\n        }\n\n        return dataArr\n    }\n\n    const getChartDataBySelection = () => {\n        let data = props.clientsStore.clients\n        if (selection === \"country\") {\n            return generateSalesByDataPoint(data, \"country\")\n        } else if (selection === \"email\") {\n            let data2 = data.filter(c => c.email_type != '-')\n            return generateSalesByDataPoint(data2, \"email_type\")\n        } else if (selection === \"owner\") {\n            return generateSalesByDataPoint(data, \"owner\")\n        }\n    }\n\n\n\n    return (\n        <div id=\"sales-by\" className=\"chart\">\n            <span id=\"salesBy\">Sales By:</span>\n            <select\n                id=\"sales-by-selection\"\n                value={selection}\n                onChange={handleSelection}\n                className=\"selectInput\">\n                <option value=\"country\">Country</option>\n                <option value=\"email\">Email</option>\n                <option value=\"owner\">Owner</option>\n            </select>\n\n            <BarChart\n                width={600}\n                height={200}\n                data={getChartDataBySelection()}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"sales\" fill=\"#955196\" />\n            </BarChart>\n\n        </div>\n    )\n}\n\nexport default inject(\"clientsStore\")(observer(SalesByCountry))","/Users/iamaliabdelhai/Desktop/code/bootcamp/Projects/CRM/src/components/SalesSinceDate.js",["127","128","129"],"import React, { Component } from \"react\";\nimport { observer, inject } from 'mobx-react'\n\nimport { XAxis, YAxis, Legend, LineChart, Line } from \"recharts\";\nimport \"../styles/analytics.css\";\n\nfunction SalesSinceDate(props){\n    \n  const getFormmatedDate = date => {\n    date = new Date(date);\n    let day = date.getDate();\n    return day;\n  };\n  const getMonth = (date) => {\n    let month = new Date(date).toLocaleString(\"en-us\", { month: \"long\" });\n    return month;\n  };\n\n  const getDataForChart = () => {\n    let mapData = props.clientsStore.clients.map(m => {return { sold: m.sold, date: new Date(m.date)}})\n    let filterData = mapData.filter(f => f.sold === 1 && getMonth(f.date) == getMonth(new Date()) && f.date.getFullYear() == new Date().getFullYear())\n    console.log(filterData)\n\n    let arr = [];\n    let obj = {};\n\n    filterData.forEach(d => {\n      obj[getFormmatedDate(d.date)] ? obj[getFormmatedDate(d.date)]++ : (obj[getFormmatedDate(d.date)] = 1);\n    });\n\n    Object.keys(obj).forEach( c => \n      arr.push({ day: c, sales: obj[c]})\n    )\n    console.log(arr)\n    return arr;\n  };\n\n  \n    return (\n      <div>\n        <span id=\"salesByMonthHeader\">Sales in {getMonth(Date.now())} </span>\n        <LineChart\n          width={1000}\n          height={250}\n          data={getDataForChart()}\n          margin={{ top: 10, right: 30, left: 47, bottom: 5 }}\n        >\n          <XAxis dataKey=\"day\" />\n          <YAxis dataKey=\"sales\" />\n          <Legend />\n          <Line\n            strokeWidth={3}\n            type=\"monotone\"\n            dataKey=\"sales\"\n            stroke=\"#FF0000\"\n          />\n        </LineChart>\n      </div>\n    );\n  \n}\n\nexport default inject(\"clientsStore\")(observer(SalesSinceDate))",{"ruleId":"130","severity":1,"message":"131","line":8,"column":24,"nodeType":"132","messageId":"133","endLine":8,"endColumn":29},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"130","severity":1,"message":"138","line":2,"column":17,"nodeType":"132","messageId":"133","endLine":2,"endColumn":26},{"ruleId":"139","severity":1,"message":"140","line":33,"column":59,"nodeType":"141","messageId":"142","endLine":33,"endColumn":61},{"ruleId":"130","severity":1,"message":"143","line":3,"column":27,"nodeType":"132","messageId":"133","endLine":3,"endColumn":33},{"ruleId":"130","severity":1,"message":"144","line":3,"column":35,"nodeType":"132","messageId":"133","endLine":3,"endColumn":40},{"ruleId":"145","severity":1,"message":"146","line":21,"column":15,"nodeType":"147","endLine":24,"endColumn":6},{"ruleId":"145","severity":1,"message":"148","line":24,"column":8,"nodeType":"149","endLine":24,"endColumn":10,"suggestions":"150"},{"ruleId":"139","severity":1,"message":"151","line":54,"column":38,"nodeType":"141","messageId":"142","endLine":54,"endColumn":40},{"ruleId":"130","severity":1,"message":"152","line":1,"column":38,"nodeType":"132","messageId":"133","endLine":1,"endColumn":44},{"ruleId":"130","severity":1,"message":"153","line":1,"column":46,"nodeType":"132","messageId":"133","endLine":1,"endColumn":54},{"ruleId":"130","severity":1,"message":"138","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":26},{"ruleId":"130","severity":1,"message":"138","line":2,"column":17,"nodeType":"132","messageId":"133","endLine":2,"endColumn":26},{"ruleId":"130","severity":1,"message":"154","line":5,"column":8,"nodeType":"132","messageId":"133","endLine":5,"endColumn":13},{"ruleId":"134","replacedBy":"155"},{"ruleId":"136","replacedBy":"156"},{"ruleId":"130","severity":1,"message":"138","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":26},{"ruleId":"130","severity":1,"message":"154","line":4,"column":8,"nodeType":"132","messageId":"133","endLine":4,"endColumn":13},{"ruleId":"130","severity":1,"message":"138","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":26},{"ruleId":"130","severity":1,"message":"157","line":1,"column":28,"nodeType":"132","messageId":"133","endLine":1,"endColumn":36},{"ruleId":"130","severity":1,"message":"138","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":26},{"ruleId":"139","severity":1,"message":"140","line":42,"column":55,"nodeType":"141","messageId":"142","endLine":42,"endColumn":57},{"ruleId":"130","severity":1,"message":"138","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":26},{"ruleId":"139","severity":1,"message":"151","line":21,"column":75,"nodeType":"141","messageId":"142","endLine":21,"endColumn":77},{"ruleId":"139","severity":1,"message":"151","line":21,"column":123,"nodeType":"141","messageId":"142","endLine":21,"endColumn":125},"no-unused-vars","'Users' is defined but never used.","Identifier","unusedVar","no-native-reassign",["158"],"no-negated-in-lhs",["159"],"'Component' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Router' is defined but never used.","'Route' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'props.clientsStore'. Either include it or remove the dependency array.","ArrayExpression",["160"],"Expected '===' and instead saw '=='.","'action' is defined but never used.","'computed' is defined but never used.","'axios' is defined but never used.",["158"],["159"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},"Update the dependencies array to be: [props.clientsStore]",{"range":"163","text":"164"},[606,608],"[props.clientsStore]"]